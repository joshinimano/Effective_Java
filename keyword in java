Java static keyword
The static keyword in Java is used for memory management mainly. We can apply static keyword with variables, methods, blocks and nested classes. The static keyword belongs to the class than an instance of the class.
The static can be:
1.Variable (also known as a class variable)
2.Method (also known as a class method)
3.Block
4.Nested class
1) Java static variable
If you declare any variable as static, it is known as a static variable.
oThe static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc.
oThe static variable gets memory only once in the class area at the time of class loading.
Advantages of static variable
It makes your program memory efficient (i.e., it saves memory).
Class a{
Static int ab=10;
Public static void main(String[] args){
System.out.println(a.ab);
}}
2) Java static method
If you apply static keyword with any method, it is known as static method.
oA static method belongs to the class rather than the object of a class.
oA static method can be invoked without the need for creating an instance of a class.
oA static method can access static data member and can change the value of it.
There are two main restrictions for the static method. They are:
1.The static method can not use non static data member or call non-static method directly.
2.this and super cannot be used in static context.

Class a{
Static void apple(){
Int ab=20;
System.out.println(ab);
Public static void main(String[] args){
a.apple();
}}
Why is the Java main method static?
It is because the object is not required to call a static method. If it were a non-static method, JVM creates an object first then call main() method that will lead the problem of extra memory allocation.
3) Java static block
oIs used to initialize the static data member.
oIt is executed before the main method at the time of classloading.
Example of static block
class A2{  
  static{
System.out.println("static block is invoked");
}  
  public static void main(String args[]){  
   System.out.println("Hello main");  
  }  
}  
static block is invoked
Hello main

Can we execute a program without main() method?
No, one of the ways was the static block, but it was possible till JDK 1.6. Since JDK 1.7, it is not possible to execute a Java class without the main method.
class A3{  
  static{  
  System.out.println("static block is invoked");  
  System.exit(0);  
  }  
}  
Output:
static block is invoked

this keyword in Java
There can be a lot of usage of Java this keyword. In Java, this is a reference variable that refers to the current object.

Usage of Java this keyword
Here is given the 6 usage of java this keyword.
1.this can be used to refer current class instance variable.
2.this can be used to invoke current class method (implicitly)
3.this() can be used to invoke current class constructor.
4.this can be passed as an argument in the method call.
5.this can be passed as argument in the constructor call.
6.this can be used to return the current class instance from the method.

this: to refer current class instance variable

class Student{  
int rollno;  
String name;  
float fee;  
Student(int rollno,String name,float fee){  
This.rollno=rollno;  
name=name;  
fee=fee;  
}  
void display(){System.out.println(rollno+" "+name+" "+fee);}  
}  
class TestThis1{  
public static void main(String args[]){  
Student s1=new Student(1,"KUMAR",5000f);  
Student s2=new Student(2,"ARUN",6000f);  
s1.display();  
s2.display();  
}}  
Output:
0 null 0.0
0 null 0.0

2) this: to invoke current class method

class A{  
void m(){System.out.println("hello m");}  
void n(){  
System.out.println("hello n");  
this.m();  
}  
}  
class TestThis4{  
public static void main(String args[]){  
A a=new A();  
a.n();  
}}  

Output:
hello n
hello m

3) this() : to invoke current class constructor
The this() constructor call can be used to invoke the current class constructor. It is used to reuse the constructor. In other words, it is used for constructor chaining.
class A{  
A(){System.out.println("hello a");}  
A(int x){  
this();  
System.out.println(x);  
}  
}  
class TestThis5{  
public static void main(String args[]){  
A a=new A(10);  
}}  

Output:
hello a
10

Super Keyword in Java
The super keyword in Java is a reference variable which is used to refer immediate parent class object.
Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.
Usage of Java super Keyword
1.super can be used to refer immediate parent class instance variable.
2.super can be used to invoke immediate parent class method.
3.super() can be used to invoke immediate parent class constructor.
 super is used to refer immediate parent class instance variable.

class Animal{  
String color="white";  
}  
class Dog extends Animal{  
String color="black";  
void printColor(){  
System.out.println(color);//prints color of Dog class  
System.out.println(super.color);//prints color of Animal class  
}  
}  
class TestSuper1{  
public static void main(String args[]){  
Dog d=new Dog();  
d.printColor();  
}}  
Output:
black
white
2) super can be used to invoke parent class method
The super keyword can also be used to invoke parent class method. It should be used if subclass contains the same method as parent class. In other words, it is used if method is overridden.
class Animal{  
void eat(){System.out.println("eating...");}  
}  
class Dog extends Animal{  
void eat(){System.out.println("eating bread...");}  
void bark(){System.out.println("barking...");}  
void work(){  
super.eat();  
bark();  
}  
}  
class TestSuper2{  
public static void main(String args[]){  
Dog d=new Dog();  
d.work();  
}}  
Output:
eating...
barking...

3) super is used to invoke parent class constructor.
The super keyword can also be used to invoke the parent class constructor. Let's see a simple example:
class Animal{  
Animal(){System.out.println("animal is created");}  
}  
class Dog extends Animal{  
Dog(){  
super();  
System.out.println("dog is created");  
}  
}  
class TestSuper3{  
public static void main(String args[]){  
Dog d=new Dog();  
}}  
Output:
animal is created
dog is created

Final Keyword In Java
The final keyword in java is used to restrict the user. The java final keyword can be used in many context. Final can be:
1.variable
2.method
3.class
The final keyword can be applied with the variables, a final variable that have no value it is called blank final variable or uninitialized final variable. It can be initialized in the constructor only. The blank final variable can be static also which will be initialized in the static block only. We will have detailed learning of these. Let's first learn the basics of final keyword.

1) Java final variable
If you make any variable as final, you cannot change the value of final variable(It will be constant).
Example of final variable
class Bike9{  
 final int speedlimit=90;//final variable  
 void run(){  
  speedlimit=400;  
 }  
 public static void main(String args[]){  
 Bike9 obj=new  Bike9();  
 obj.run();  
 }  
}
Output:Compile Time Error

2) Java final method
If you make any method as final, you cannot override it.
Example of final method
class Bike{  
  final void run(){System.out.println("running");}  
}  
     
class Honda extends Bike{  
   void run(){System.out.println("running safely with 100kmph");}  
     
   public static void main(String args[]){  
   Honda honda= new Honda();  
   honda.run();  
   }  
}  

Output:Compile Time Error

3) Java final class
If you make any class as final, you cannot extend it.
Example of final class
final class Bike{}  
  
class Honda1 extends Bike{  
  void run(){System.out.println("running safely with 100kmph");}  
    
  public static void main(String args[]){  
  Honda1 honda= new Honda1();  
  honda.run();  
  }  
}  

Output:Compile Time Error

Q) Is final method inherited?
Ans) Yes, final method is inherited but you cannot override it. For Example:
class Bike{  
  final void run(){System.out.println("running...");}  
}  
class Honda2 extends Bike{  
   public static void main(String args[]){  
    new Honda2().run();  
   }  
}  

Output:running...

Q) What is blank or uninitialized final variable?
A final variable that is not initialized at the time of declaration is known as blank final variable.
If you want to create a variable that is initialized at the time of creating object and once initialized may not be changed, it is useful.
 For example PAN CARD number of an employee.
It can be initialized only in constructor.
Example of blank final variable
class Student{  
int id;  
String name;  
final String PAN_CARD_NUMBER;  
...  
}  
Que) Can we initialize blank final variable?
Yes, but only in constructor. For example:
class Bike10{  
  final int speedlimit;//blank final variable  
    
  Bike10(){  
  speedlimit=70;  
  System.out.println(speedlimit);  
  }  
  
  public static void main(String args[]){  
    new Bike10();  
 }  
}  

Output: 70

static blank final variable
A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.
Example of static blank final variable
class A{  
  static final int data;//static blank final variable  
  static{ data=50;}  
  public static void main(String args[]){  
    System.out.println(A.data);  
 }  
}  

Q) What is final parameter?
If you declare any parameter as final, you cannot change the value of it.
class Bike11{  
  int cube(final int n){  
   n=n+2;//can't be changed as n is final  
   n*n*n;  
  }  
  public static void main(String args[]){  
    Bike11 b=new Bike11();  
    b.cube(5);  
 }  
}  

Output: Compile Time Error

Q) Can we declare a constructor final?
No, because constructor is never inherited.
